# -*- coding: utf-8 -*-
"""paython basics assignment=1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1httR11fLwAbT-VMmSdXgGYKsq3vKYNro
"""



"""1. In the below elements which of them are values or an expression? eg:- values can be
integer or string and expressions will be mathematical operators.
*
&#39;hello&#39;
-87.8
-
/
+
6
"""

def is_value_or_expression(element):
    mathematical_operators = {'*', '-', '/', '+'}

    if isinstance(element, str):
        return "Value (string)"
    elif isinstance(element, int) or isinstance(element, float):
        return "Value (integer or floating-point number)"
    elif element in mathematical_operators:
        return "Expression (mathematical operator)"
    else:
        return "Unknown"

# Given elements
elements = ['*', 'hello', -87.8, '-', '/', '+', 6]

for element in elements:
    print(f"{element}: {is_value_or_expression(element)}")

"""2. What is the difference between string and variable?

ANS=
String:

A string is a data type used to represent textual data in programming. It is a sequence of characters, such as letters, numbers, symbols, or spaces, enclosed within single quotes (' ') or double quotes (" ").
Strings are used to store and manipulate textual information, such as names, messages, sentences, or any other type of textual data.
Example: "Hello, World!", 'Python is awesome', "12345"
Variable:

A variable is a name given to a memory location in a computer's memory where data can be stored. It acts as a container to hold a value that can be accessed and manipulated during the program's execution.
Variables are used to store various types of data, including strings, numbers, lists, and more.
A variable must be declared and assigned a value before it can be used in the program.
Example: x = 10, name = "John", pi = 3.14

3. Describe three different data types.

ANS=
Integer (int):

The integer data type represents whole numbers, both positive and negative, without any decimal points. It can represent an unlimited range of whole numbers depending on the system's memory capacity.
Example: 5, -10, 0, 1000, -987654321
String (str):

The string data type represents sequences of characters. It is used to store textual data, such as words, sentences, or any other collection of characters.
Strings are typically enclosed within single quotes (' ') or double quotes (" "). In some programming languages, they can also be enclosed within backticks (`).
Example: "Hello, World!", 'Python is fun', "12345"
Boolean (bool):

The boolean data type represents a binary value indicating either true or false. It is used for logical operations and flow control in programming.
Boolean values are often the result of comparisons or logical operations, and they are essential for decision-making and branching in code.
Example: True, False (Note that these are specific to Python; other programming languages may use true and false, 1 and 0, or other representations.)

4. What is an expression made up of? What do all expressions do?

ANS=
In Python, an expression is made up of one or more values, variables, and operators, which are combined in a way that produces a new value. Expressions can be simple, involving only a single value or variable, or they can be more complex, involving multiple values and operators.
"""

# Simple expressions
a = 5
b = 10
c = a + b  # Addition expression: Adds the values of 'a' and 'b' and assigns the result to 'c'

name = "John"
greeting = "Hello, " + name  # Concatenation expression: Combines the strings 'Hello, ' and 'John'

# Complex expressions
x = 2
y = 3
z = (x + y) * (x - y)  # Combination of addition and subtraction expressions within parentheses

# Logical expression with comparison and boolean operators
temperature = 25
is_summer = True
is_hot_summer_day = is_summer and temperature > 30  # Logical AND expression with comparison

# List comprehension expression
numbers = [1, 2, 3, 4, 5]
squared_numbers = [num ** 2 for num in numbers]  # List comprehension expression to square each number

# Function call expression
def add_numbers(a, b):
    return a + b

result = add_numbers(10, 20)  # Function call expression to call the 'add_numbers' function

# Dictionary comprehension expression
keys = ['a', 'b', 'c']
values = [1, 2, 3]
my_dict = {k: v for k, v in zip(keys, values)}  # Dictionary comprehension expression

print(c)  # Output: 15
print(greeting)  # Output: Hello, John
print(z)  # Output: -5
print(is_hot_summer_day)  # Output: False
print(squared_numbers)  # Output: [1, 4, 9, 16, 25]
print(result)  # Output: 30
print(my_dict)  # Output: {'a': 1, 'b': 2, 'c': 3}

"""5. This assignment statements, like spam = 10. What is the difference between an
expression and a statement?

ANS=
Expression:

An expression is a combination of values, variables, and operators that evaluates to a single value. It produces a result when executed and can be used as part of a larger expression or be assigned to a variable.
Expressions do not perform any action; they only produce a value.
Examples of expressions: 5 + 3, x * y, 'Hello' + 'World', 3 > 1
Statement:

A statement is a complete line of code that performs an action. It represents an instruction for the computer to do something.
Statements can include expressions, but they also encompass control flow structures (if, for, while), function and class definitions, variable assignments, and more.
Examples of statements: spam = 10 (assignment statement), print("Hello, World!") (print statement), if x > 0: print("Positive") (if statement)
"""

# Expression
x = 5
y = 3
result = x + y  # The expression x + y evaluates to 8 and is assigned to the variable 'result'
print(result)  # Output: 8

# Statement
if x > y:  # This is a statement, which uses the expression 'x > y' to make a decision
    print("x is greater than y")
else:
    print("y is greater than x")

"""6. After running the following code, what does the variable bacon contain?
bacon = 22
bacon + 1
"""

bacon = 22
bacon = bacon + 1
bacon = 22
bacon = bacon + 1
print(bacon)  # Output: 23

"""7. What should the values of the following two terms be?
&#39;spam&#39; + &#39;spamspam&#39;
&#39;spam&#39; * 3
"""

term1 = 'spam' + 'spamspam'
term2 = 'spam' * 3
print(term1)
print(term2)
term1 = 'spam' + 'spamspam'
term2 = 'spam' * 3
print(term1)
print(term2)

"""8. Why is eggs a valid variable name while 100 is invalid?"""

# Valid variable name: eggs
eggs = "I am a valid variable name."
print(eggs)

# Invalid variable name: 100
100 = "This will raise a syntax error."
print(100)

"""9. What three functions can be used to get the integer, floating-point number, or string
version of a value?

ANS=
In Python, you can use the following three functions to get the integer, floating-point number, or string version of a value:

int(): This function is used to convert a value to an integer.

float(): This function is used to convert a value to a floating-point number.

str(): This function is used to convert a value to a string.
"""

# Integer conversion
value_int = int(10.5)
print(value_int)  # Output: 10

# Floating-point conversion
value_float = float("3.14")
print(value_float)  # Output: 3.14

# String conversion
value_string = str(42)
print(value_string)  # Output: '42'

"""10. Why does this expression cause an error? How can you fix it?
&#39;I have eaten &#39; + 99 + &#39; burritos.&#39;
"""

message = 'I have eaten ' + str(99) + ' burritos.'
print(message)

"""The expression 'I have eaten ' + 99 + ' burritos.' causes an error because you cannot directly concatenate a string with an integer using the + operator. In Python, the + operator can concatenate two strings or perform addition between two numbers, but it cannot concatenate a string with a number"""